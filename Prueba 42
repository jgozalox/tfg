CAMBIOS EN MAIN B

import os
import numpy as np
import pandas as pd
import xgboost as xgb
from sklearn.preprocessing import StandardScaler
from sklearn.metrics import accuracy_score

# Definir el diccionario de mapeo
emotion_map = {'happy': 0, 'sad': 1, 'angry': 2}

# Cargar los datos de entrenamiento y prueba
train_dataset = pd.read_csv('train_dataset2222.csv')
train_dataset = train_dataset.drop(train_dataset[train_dataset['labels'] == 'neutral'].index)
train_dataset = train_dataset.drop(train_dataset[train_dataset['labels'] == 'calm'].index)
train_dataset = train_dataset.drop(train_dataset[train_dataset['labels'] == 'fear'].index)
train_dataset = train_dataset.drop(train_dataset[train_dataset['labels'] == 'disgust'].index)
train_dataset = train_dataset.drop(train_dataset[train_dataset['labels'] == 'surprise'].index)
train_dataset = train_dataset.drop(train_dataset[train_dataset['labels'] == 'unknown'].index)

x_train = train_dataset.iloc[:, :-1].values
y_train = train_dataset['labels'].replace(emotion_map)
print('Shape of training data:', train_dataset.shape)

test_dataset = pd.read_csv('test_dataset2222.csv')
test_dataset = test_dataset.drop(test_dataset[test_dataset['labels'] == 'neutral'].index)
test_dataset = test_dataset.drop(test_dataset[test_dataset['labels'] == 'calm'].index)
test_dataset = test_dataset.drop(test_dataset[test_dataset['labels'] == 'fear'].index)
test_dataset = test_dataset.drop(test_dataset[test_dataset['labels'] == 'disgust'].index)
test_dataset = test_dataset.drop(test_dataset[test_dataset['labels'] == 'surprise'].index)
test_dataset = test_dataset.drop(test_dataset[test_dataset['labels'] == 'unknown'].index)

x_test = test_dataset.iloc[:, :-1].values
y_test = test_dataset['labels'].replace(emotion_map)
print('Shape of testing data:', test_dataset.shape)

# Normalización Z-score
scaler = StandardScaler()
x_train = scaler.fit_transform(x_train)
x_test = scaler.transform(x_test)

# Convertir los datos a matrices DMatrix específicas de XGBoost
dtrain = xgb.DMatrix(x_train, label=y_train)
dtest = xgb.DMatrix(x_test, label=y_test)

# Definir los parámetros del modelo XGBoost
params = {
    'objective': 'multi:softmax',
    'num_class': len(emotion_map),
    'eta': 0.01,
    'max_depth': 6,
    'min_child_weight': 1,
    'subsample': 0.8,
    'colsample_bytree': 0.8,
    'eval_metric': 'merror'
}

# Entrenar el modelo XGBoost
num_rounds = 1000
model = xgb.train(params, dtrain, num_rounds)

# Realizar predicciones en los datos de prueba
y_pred = model.predict(dtest)

# Calcular la precisión
accuracy = accuracy_score(y_test, y_pred)
print('Accuracy:', accuracy)

# Guardar el modelo
model.save_model('xgboost_model.model')


