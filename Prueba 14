CAMBIOS EN PROCESADO

Features = pd.DataFrame(X)

# Calcula la media y la desviación estándar
media = np.mean(Features)
desviacion_estandar = np.std(Features)

# Aplica la estandarización
data_normalizado = (Features - media) / desviacion_estandar

Features = data_normalizado


CAMBIOS EN MAIN B

# build network topology
model = Sequential()

model.add(Conv2D(256, kernel_size=(5, 1), strides=(1, 1), padding='same', activation='relu', input_shape=(x_train.shape[1], x_train.shape[2], x_train.shape[3])))
model.add(MaxPooling2D(pool_size=(5, 1), strides=(2, 1), padding='same'))

model.add(Conv2D(256, kernel_size=(5, 1), strides=(1, 1), padding='same', activation='relu'))
model.add(MaxPooling2D(pool_size=(5, 1), strides=(2, 1), padding='same'))

model.add(Conv2D(128, kernel_size=(5, 1), strides=(1, 1), padding='same', activation='relu'))
model.add(MaxPooling2D(pool_size=(5, 1), strides=(2, 1), padding='same'))
model.add(Dropout(0.2))

model.add(Conv2D(64, kernel_size=(5, 1), strides=(1, 1), padding='same', activation='relu'))

model.add(MaxPooling2D(pool_size=(5, 1), strides=(2, 1), padding='same'))

model.add(Flatten())
model.add(Dense(units=32, activation='relu'))
model.add(Dropout(0.3))

model.add(Dense(units=6, activation='softmax'))
